function [wx,wy,wz,psi,theta,phi] = mitton(wx0,wy0,wz0,psi0,theta0,phi0,t,Mx,My,Mz)

    % Inertial Properties%
    %%%%%%%%%%%%%%%%%%%%%%

    % Command Module 
    weight_cm = 9730/2.20462442018; % kg
    COM_cm = [1043.1;-.1;7.8] ./39.3701; % center of mass in A frame in m
    I_cm = [4474,0,0;0,3919,0;0,0,3684] * 1.3558179619; % I in kg*m^2 about the COM of each component

    % Service Module
    weight_sm = 9690/2.20462442018;
    COM_sm = [908.2;.7;-.6] ./39.3701; 
    I_sm= [6222,0,0;0,10321,0;0,0,10136] * 1.3558179619;

    % Propellant
    weight_prop = 37295/2.20462442018;
    COM_prop = [905.9;5.6;-2.4] ./39.3701;
    I_prop = [19162,0,0;0,19872,0;0,0,26398]*1.3558179619;

    % Command Service Module (including propellants)
    weight_csm = weight_cm+weight_sm+weight_prop;

    % Centers of Gravity are in the NASA references system except that the
    % total longitudinal axis has an origin of 1000 inches below the tangenoy
    % point of the command module substructure mold line

    % The propellant weight of 37295 pounds provides approximately 10% del V
    % margin, and is determined from an estimate time line analysis. The
    % propellant weight is based on a specific impulse of 313.0


    % Task A: Inertial Properties

    % a. General Case, using the center of mass data

    %      a. The location of the center of mass of the CSM, expressed in
    %      meters, as a vector relative to the A frame. Include the
    %      propellant in your calculation. 

    % about A frame
    for i = 1:3
        COM_csm(i,1) = (COM_sm(i)*weight_sm + COM_cm(i)*weight_cm + COM_prop(i)*weight_prop ) / (weight_csm);
    end

    %      b. The total inertia matrix of the CSM, including propellant, about 
    %      the body-fixed B axes at the center of mass of the CSM. Express your
    %      answer as a matrix with units of kg-m^2.

    d = -COM_sm + COM_csm;
    I_sm_B  = I_sm + weight_sm*(d'*d*eye(3) - d*d');

    d = -COM_cm + COM_csm;
    I_cm_B = I_cm + weight_cm*(d'*d*eye(3) - d*d');

    d = -COM_prop + COM_csm;
    I_prop_B = I_prop + weight_prop*(d'*d*eye(3) - d*d');

    % total Inertia matrix including propellant
    I_csm_B = (I_sm_B + I_cm_B + I_prop_B);

    % b. Simplified Case, assuming the centers of mass of all components are
    % located on the x axis:

    %      a. The location of the center of mass of the CSM, expressed in
    %      meters, as a vector relative to the A frame. Include the
    %      propellant in your calculation.

    COM_sm_simp=COM_sm;
    COM_sm_simp(2:3) = 0;
    COM_cm_simp = COM_cm;
    COM_cm_simp(2:3) = 0;
    COM_prop_simp = COM_prop;
    COM_prop_simp(2:3) = 0;

    % about A frame
    for i = 1:3
        COM_csm_simp(i,1) = (COM_sm_simp(i)*weight_sm + COM_cm_simp(i)*weight_cm + COM_prop_simp(i)*weight_prop ) / (weight_csm);
    end

    %      b. The total inertia matrix of the
    %      CSM, including propellant, about the body-fixed B axes at the
    %      center of mass of the CSM. Express your answer as a matrix with
    %      units of kg-m2.

    d = -COM_sm_simp + COM_csm_simp;
    I_sm_B_simp  = I_sm + weight_sm*(d'*d*eye(3) - d*d');

    d = -COM_cm_simp + COM_csm_simp;
    I_cm_B_simp = I_cm + weight_cm*(d'*d*eye(3) - d*d');

    d = -COM_prop_simp + COM_csm_simp;
    I_prop_B_simp = I_prop + weight_prop*(d'*d*eye(3) - d*d');

    % total Inertia matrix including propellant
    I_csm_B_simp = I_sm_B_simp + I_cm_B_simp + I_prop_B_simp;
    
    % Task B: Equations of Motion

    % Find the rotational equations of motion that could be solved numerically
    % to find the orientation of the spacecraft (psi, theta, phi) given torque
    % inputs about the body-fixed (B frame) xyz axis. The torques would
    % typically be generated by thrusters, but you can leave them as general
    % symbols (Mx, My, Mz) in your equations. You may present the equations as
    % a set of six 1st order equations in state variable form, or as [M] axis
    % and {F} vector that could be used to put them in state-variable form.
    % Whichever form you choose, you should (1) make it clear which form you
    % are using, (2) reduce the equations as much as possible, and (3) collect
    % derivative terms. Leave all the moments and products of inertia in
    % symbolic form; do not insert numbers.
    
    initials = [wx0,wy0,wz0,psi0,theta0,phi0];
    initials = initials*pi/180;
    
    times = t;
    [t,y1] = ode45(@(t,x) spencer(t,x,Mx,My,Mz,I_csm_B_simp,times),t,initials);
    
    y = y1*180/pi;
    
    psi = y(:,4);
    theta = y(:,5);
    phi = y(:,6);
    wx = y(:,1);
    wy = y(:,2);
    wz = y(:,3);
    
end

function xdot = spencer(t,x,Mx,My,Mz,I,times) 

    om1 = x(1);
    om2 = x(2);
    om3 = x(3);
    theta = x(5);
    phi = x(6);
    
    wx = om1;
    wy = om2;
    wz = om3;
    
    Mx = interp1(times,Mx,t);
    My = interp1(times,My,t);
    Mz = interp1(times,Mz,t);
    
    % EOM
    B = [I(1,2)*wx*wz - I(1,3)*wx*wy - (I(2,2)-I(3,3))*wy*wz - I(2,3)*(wy^2 - wz^2);
         I(2,3)*wx*wy - I(1,2)*wy*wz - (I(3,3)-I(1,1))*wx*wz - I(1,3)*(wz^2 -wx^2);
         I(1,3)*wy*wz - I(2,3)*wx*wz - (I(1,1)-I(2,2))*wx*wy - I(1,2)*(wx^2 - wy^2)];
    wdot = I\([Mx;My;Mz] - B);

    om1dot = wdot(1);
    om2dot = wdot(2);
    om3dot = wdot(3);
    
    xdot = [om1dot;
            om2dot;
            om3dot;
            (1/cos(theta))*(om2*sin(phi) + om3*cos(phi));
            om2*cos(phi) - om3*sin(phi);
            (1/cos(theta))*(om2*sin(theta)*sin(phi) + om3*sin(theta)*cos(phi)) + om1];
end